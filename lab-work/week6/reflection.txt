When passing the pointer to a function (by called the variable var as &var) you subject yourself to side effects such as modifiying the pointer value. If the pointer value is modified, it will be modified everywhere, i.e. it does not reset after the function ends, even if it's not one of the return values. This can cause your variables to change in value accross the program. This is unlike variables, as modifying a variable inside a function does not change its value outside of its local scope. 

In my opinion, I think that the side effect of changing the pointer value outside of the scope is a double-edged sword with both advantages and disadvantages. It's advantageous in the sense that it allows for direct manipualtion of the variable. If the programmer does not want such easy modifications to their variables, they can pass through variables instead of pointers. A disadvantage of this is that it allows for pointers and therefore their values to change very easily, which can lead to issues and troubles in the code if not used carefully. 
